# -*- coding: utf-8 -*-
"""rasp.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1sY3TIEPQHGBauqesWxw75DKJr6RV9aQy
"""

import numpy as np
import argparse
import cv2
import time
import sys
import RPi.GPIO as GPIO
from gpiozero import Buzzer
from time import sleep

LED_PIN = 23
BUZZER_PIN = Buzzer(24)
SERVO_PIN = 25

GPIO.setmode(GPIO.BCM)
GPIO.setup(LED_PIN, GPIO.OUT)
GPIO.output(LED_PIN, True)

GPIO.setup(SERVO_PIN, GPIO.OUT)

pwm = GPIO.PWM(SERVO_PIN, 50)
pwm.start(0)


def setAngle(angle):
    duty = angle / 18 + 2
    GPIO.output(SERVO_PIN, True)
    pwm.ChangeDutyCycle(duty)
    sleep(1)
    GPIO.output(SERVO_PIN, False)
    pwm.ChangeDutyCycle(0)


cap = cv2.VideoCapture(0)
fourcc = cv2.VideoWriter_fourcc(*'XVID')
out = cv2.VideoWriter('my_cam_cis.avi', fourcc, 20.0, (640, 480))
setAngle(90)

while (True):
    ret, captured_frame = cap.read()
    captured_frame = cv2.rotate(captured_frame, cv2.ROTATE_180)
    output_frame = captured_frame.copy()

    captured_frame_bgr = cv2.cvtColor(captured_frame, cv2.COLOR_BGRA2BGR)
    captured_frame_bgr = cv2.medianBlur(captured_frame_bgr, 3)
    captured_frame_lab = cv2.cvtColor(captured_frame_bgr, cv2.COLOR_BGR2Lab)

    captured_frame_lab_red = cv2.inRange(captured_frame_lab, np.array([20, 150, 150]), np.array([190, 255, 255]))
    captured_frame_lab_red = cv2.GaussianBlur(captured_frame_lab_red, (5, 5), 2, 2)
    circles = cv2.HoughCircles(captured_frame_lab_red, cv2.HOUGH_GRADIENT, 1, captured_frame_lab_red.shape[0] / 8)

    if circles is not None:
        circles = np.round(circles[0, :1]).astype("int")
        cv2.circle(output_frame, center=(circles[0, 0], circles[0, 1]), radius=circles[0, 2], color=(0, 255, 0),
                   thickness=2)
        GPIO.output(LED_PIN, True)
        BUZZER_PIN.beep()
    elif circles is None:
        GPIO.output(LED_PIN, False)
        BUZZER_PIN.off()

    i = 0
    x_old = 0
    angle = 90
    if i % 10 == 0:
        if circles is not None:
            print(circles[0, 0])
            if circles[0, 0] - x_old < -100:
                angle = angle + (circles[0, 0] - x_old) * 0.046875
                setAngle(angle)
            elif circles[0, 0] - x_old > 100:
                angle = angle - (circles[0, 0] - x_old) * 0.046875
                setAngle(angle)
            x_old = circles[0, 0]
        else:
            print(None)
    i = i + 1

    cv2.imshow('frame', output_frame)
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

    GPIO.cleanup()
    cap.release()
    out.release()
    cv2.destroyAllWindows()